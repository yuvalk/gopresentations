How to train your gophers

Yuval Kashtan
Red Hat
@yuvalk
yuvalkashtan@gmail.com
yuval@redhat.com

[[https://github.com/yuvalk/howtotrainyourgophers][_this_ _presentation_]] _was_ _written_ _in_ _go_

* About me

- Red Hatter
- Telco 5G Engineering, Security Team Lead
- Infrastructure Developer (Networking, Storage, Security, etc)
- All things opensource


* Agenda

- Why Go
- Intro to the language
- Brief history of multi-threading
- Go Routines
- Gophers

* Why Go

.image Go-Logo_Black.png 400 _

.caption from [[https://blog.golang.org/go-brand][The go branding strategy]]

: Go is at the peak of the climb. It is becoming the main stream and is the preferred language for systems.
: the most interesting things released in the last period are done in go

* Why Go

.image companiesusing.png 400 _

.caption from [[https://go.dev][go.dev]]

: crossing the chasm

* The recipe for Go

- Go back to the 70s / 80s and find a bunch of great programmers. Say, Ken Thompson, Rob Pike, people like that. Marinate them in Bell Labs for 30 years, during which time they code in C, keep developing Unix, invent Plan 9, UTF-8, and other wonderful things.

- Take them out, seduce them with Python, wow them with Google-scale computing. Add more amazing programmers (Brad Fitzpatrick for example), stir in Googleâ€™s near-unlimited resources.

- Ask them how they would do C now, if they could start from scratch.

.caption _credits_ by [[https://www.darkcoding.net/software/go-lang-after-four-months/][Graham King]]


* Can a language be fast and fun to use?

.image gograph.png 400 _

* Go's elevator pitch:

- fast
- good at networking and multiprocessing
- scales well
- easy to learn
- comprehensible

* Go vs lower level languages

gVisor was written in Go in order to avoid security pitfalls that can plague kernels. With Go, there are strong types, built-in bounds checks, no uninitialized variables, no use-after-free, no stack overflow, and a built-in race detector. (The use of Go has its challenges too, and isn't free.)

.caption from [[https://github.com/google/gvisor][google gvisor repository]]

* Let's dive in

* Basic data types

We do have integers, floats, booleans:

	var n int64 = 23
	var n1 int = 28
	var p float64 = 9.75
	var r bool = true

Go provides a higher level _string_ type:

	var s string = "Hello"
	s = s + " gopher trainer" // s = "Hello gopher trainer"
	s = s[1:5] // ello

* Arrays 

	var a[3]int = [3]int{1,2,3}
	var b[3]int = [...]int{1,2,3}
	a[2] // 3
	len(a) // 3

- Fixed lenght
- Passed by value

* Slices

	var s[]int = []int{1,2,3}
	s1 := a[1:3] // 2, 3
	s2 := make([]int, 3) // {0, 0, 0}
	var s3

	s := append(s, 4) /
	s := append(s, s1...) // 1,2,3,4,2,3

- Dynamically sized
- Automatically resized by append

: append creates a new slice

* Maps 

	var values = make(map[string]int)

	values["pr"] = 23
	values["bdu"] = 28
	delete(m, "bdu")

	if age, ok := values["pr"]; !ok { /* ... */ } // if not found, age = 0 value

* Functions

	func f(a, b int) (string, error) {
		/* ... */
	}

- multiple return values (error handling)
- first class values
- can be anonymous

	func getAdder(toSum int) func(int) int {
		return func(arg int) int  {
			return arg + toSum;
		}
	}

* Memory management

There are pointers , which is good: the dev is in control of what is passed by value and what by reference 

	func f() int* {
		int result = 28
		return &result //result stored in the heap
	}

- garbage collected
- pointers are references to live objects: there is no way to mess up with the memory
- the compiler helps us with methods on pointers

	p := new(MyStruct)
	p.stuff() // the same as (*p).stuff()


: differenza con altri linguaggi dove tutto e` per reference 
: no boxing
: using escape analysis, the compiler chooses what to leave on the stack and what on the heap
: menzionare unsafe package
: andare sullo heap causa lavoro extra per il garbage collector

* Nice things about GO

* It's safe

Prevents side effects related to distractions 

- assignement between different types requires explicit conversion
- variables are initialized with zero values
- no pointer arithmetic
- variables *must* be used

* Does more with (a bit) less

- No ; nor () around ifs
- Type inference, short variable declaration

	var s = "howtotrain"
	s1 := "howtotrain" // only inside a function

- Multiple return values (also, named return values)

	func f(arg int) (res int, err error) { /* ... */ }

: opinionated: no exceptions

* Doing more with less

- Range loops (in maps, slices and strings)

	for _, val := range(mySlice) { /* ... */ }

- defer() to call finalizing operations inside a function

	func f() {
		mutex := &sync.Mutex{}
		defer mutex.Unlock()

		...
		if cond {
			return
		}
		...
		return
	}

- no break in switch, switch cases can be conditions

* Productivity boost!

Compiling is *really* fast

.image compiling.png

* Let's talk about OOP

* User defined data structures

Go Structs

	type book struct {
		title string
		author string
	}

	var b book	// zero value
	var b1 book{title:"Golang"} // literal initializer

: no inheritance
: no generics
: enforce composition through embedding
: linear structures

* Methods

- Just a special kind of functions (they have a receiver)
- Explicitly associated to objects or pointers

	type Dog struct {
		Animal
	}

	func (d Dog) bark() {
		// bark
	}

	func (d *Dog) feed() {
		d.weight++
	}

: can assign methods to any type, even those you don't own

* Interfaces

- Abstract types defining a behaviour
- Satisfied implicitly 

	type Driveable interface {
		func Drive() int
	}

	func (c Car) Drive (km int) {/* */}
	func (b Bike) Drive (km int) {/* */}

	var c Car{wheels : 4}
	var d Driveable = c

_If_it_walks_like_a_duck_and_quacks_as_a_duck,_it's_a_duck_

: But the compiler tells you if you made a mistake
: You can create interfaces that are satisfied by structs you don't own.

* Interfaces (2)

- Can be composed

	type ReadWriter interface {
		Reader
		Writer
	}


- Can be checked

	c, ok := d.(Car) // true
	c, ok := d.(Bike)  // false

	switch d.(type) {
		case Car: //
	}

: you can retro assign an interface to any object
: Interfaces can be used as a placeholder to use different concrete types 

* Favor composition over inheritance

* Only composition is possible!

	type Pod struct {
	    metav1.TypeMeta
	    metav1.ObjectMeta
	    Spec   PodSpec
	    Status PodStatus
	}

	p := corev1.Pod{}
	p.Name = "Foo" // Name is a field of ObjectMeta

* Encapsulation

.image encapsulation.jpeg _ 400

* Encapsulation in Go:

- The visibility is related to the _package_
- Multiple files can belong to the same package
- The visibility is toggled by uppercasing / lowercasing 


Every file belongs to a package

	package mypackage

	var Exported int
	var notExported string

: non ci sono 540 modificatori di visibilita` diversi.
: Strive to simplicity. 

* Everything else

* Coding style

.image spacestabs.png 250 _

.caption Survey by [[https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/][stackoverflow]] 

Go fmt formats the code in the "go way"

- easier to read
- easier to write
- no tabs vs spaces discussions!

* Dependency management

- The dependency unit is a *module*
- Roughly mapped to a github repo
- Served by proxies

	go get github.com/sirupsen/logrus


Discover modules in [[https://pkg.go.dev]]


* Deploying

There is no need for shared libraries.

The go runtime is linked together with the executable. The absence of external dependencies makes the deployement a lot easier than a C executable.

* There's more!
- reflection
- race detector
- C interoperability
- rich standard library
- awesome echosystem (https://github.com/avelino/awesome-go)
- integrated testing framework
- native cpu and memory profiling
- cross compiles
- awesome linters

* Go focuses on

- being explicit rather than implicit
- being readable
- being safe
- getting sh*t done

.image run.png
	
: e` questo il vero super potere di go

* Where are my gophers?!

.image beergophers.png 400 _

: A bug in multithreading can result in memory corruption with unexpected and unpredictable results. Moreover, it could happen in very rare situations difficult to reproduce with tests.
: What's more, a wrong usage of the locking primitives can result in a deadlock of two or more threads.
: *Getting*threading*right*is*difficult*

* Goroutines

Goroutines are lightweight threads managed by the Go runtime.

	go myFunction()

*Why*lighter?*

- smaller (altough variable) stack
- many goroutines can share a single os thread
- scheduling not invoked periodically but as a consequence of synchronization


_It_is_practical_to_create_hundreds_of_thousands_of_goroutines_in_the_same_address_space_


* Why are they different?

* Channels

A channel is a communication mechanism between two goroutines

	ch := make(chan int)

We can send values to a channel

	ch <- 23

or receive from a channel

	res := <- ch

or just check if send has happened

	<- ch

* Buffered vs unbuffered

Channels can be buffered or unbuffered.

	buffered := make(chan int, 5)

	unbuffered := make(chan int)

Sending on a full channel blocks the sender, receiving from an empty channel blocks the receiver.

: channels are VALUES
: origins in csp communicating sequential processes

* Goroutines are indipendent executing actors communicating via channels
.image concurrency.jpeg

Definetely easier to reason about

* Select

	select {
	case <-ch1:
		// ...
	case x := <-ch2:
		// ...use x...
	case ch3 <- y:
		// ...
	default:
		// ...
	}

A way to multiplex several channels. Waits until a communication for one of its cases is ready.

* Classic synchronization primitves

- Mutexes
- RW Locks
- sync.Once
- Atomic operations (atomic package)


* Let's put this into the real world

* A simple goroutine 

.image simple.png 300 _

* A simple goroutine 

.play goroutine.go /START OMIT/,/END OMIT/

* With synchronization

.image simplewithsync.png 300 _

* With synchronization 

.play syncgoroutine.go /START OMIT/,/END OMIT/

* Select multiplexes multiple channels

.image select.png 350 _

* Select multiplexes multiple channels

.play selectgoroutine.go /START OMIT/,/END OMIT/

: Risultato omesso per far vedere solo come funziona la select sui canli
: La select e' pseudorandom se tutti i case sono non bloccanti
: generator lancia una goroutine e ritorna un canale su cui la goroutine scrive

* Closing a channel generates a message

.image range.png 400 _

* Closing a channel generates a message

.play closechannel.go /START OMIT/,/END OMIT/

: Per vedere se un canale si chiude si guarda secondo valore restituito

* Closing a channel generates a message (short version)

.play closechannelwithrange.go /START OMIT/,/END OMIT/

* Some patterns

* Block with timeout

.image selecttimeout.png 300 _

* Block with timeout

.play selecttimeout.go /START OMIT/,/END OMIT/

: funziona perche' i canali non piu` raggiungibili vengono portati via dal gc

* Fan in

.image fanin.png 400 _

* Fan in

.play fanin.go /START OMIT/,/END OMIT/

* Load balancer with workers

.image loadbalancer.png 400 _

* Load balancer with workers

.play loadbalancer.go /START OMIT/,/END OMIT/

* Channels can be passed around

.image channelpassed.png 400 _

* Channels can be passed around

.play channelspassed.go /START OMIT/,/END OMIT/

: pattern simile a async await

* .. and more 

* What can we say about goroutines

- Goroutines are actors that perform their tasks sequentially
- No mutexes, no locks, no callbacks!
- Fun to write!
- A way to transform a sequential program into a concurreny one

* The last gopher trainer advice(s)

* Handle with care!

- avoid the temptation to summon your gopher army
- context switch has an hidden cost
- mutexes / rw locks have their use cases
- use the profilers
- use the synchronization primitives and the atomic package

: non sono la soluzione a tutti i mali
: le mappe si proteggono molto meglio con un rw lock che non passando da una goroutine


* Where to go from here

- Official website
.link http://golang.org

- Interactive Tutorial
.link http://tour.golang.org

- Go dev
.link https://go.dev

- Effective go
.link https://golang.org/doc/effective_go.html

- Mailing list
.link https://groups.google.com/forum/#!forum/golang-nuts

